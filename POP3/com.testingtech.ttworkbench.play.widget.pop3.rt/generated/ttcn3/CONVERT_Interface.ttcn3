// generated by ProtoGenerator at Tue Feb 12 13:54:06 CET 2013 - do not edit!
module CONVERT_Interface {
  import from Interface all;
  import from PROTO_Interface language "PROTO" all;

  function fromProto_Connect(template(omit) PROTO_Interface.Connect p_value)
    return template(omit) Interface.Connect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        server := p_value.server,
        portNumber := p_value.portNumber
      }
    }
  }

  function toProto_Connect(template(omit) Interface.Connect p_value)
    return template(omit) PROTO_Interface.Connect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        server := p_value.server,
        portNumber := p_value.portNumber
      }
    }
  }

  function fromProto_Disconnect(template(omit) PROTO_Interface.Disconnect p_value)
    return template(omit) Interface.Disconnect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
         
      }
    }
  }

  function toProto_Disconnect(template(omit) Interface.Disconnect p_value)
    return template(omit) PROTO_Interface.Disconnect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        
      }
    }
  }

  function fromProto_Login(template(omit) PROTO_Interface.Login p_value)
    return template(omit) Interface.Login {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        username := p_value.username,
        password := p_value.password,
        secret := p_value.secret
      }
    }
  }

  function toProto_Login(template(omit) Interface.Login p_value)
    return template(omit) PROTO_Interface.Login {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        username := p_value.username,
        password := p_value.password,
        secret := p_value.secret
      }
    }
  }

  function fromProto_Logout(template(omit) PROTO_Interface.Logout p_value)
    return template(omit) Interface.Logout {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
         
      }
    }
  }

  function toProto_Logout(template(omit) Interface.Logout p_value)
    return template(omit) PROTO_Interface.Logout {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        
      }
    }
  }

  function fromProto_ListMessages(template(omit) PROTO_Interface.ListMessages p_value)
    return template(omit) Interface.ListMessages {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
         
      }
    }
  }

  function toProto_ListMessages(template(omit) Interface.ListMessages p_value)
    return template(omit) PROTO_Interface.ListMessages {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        
      }
    }
  }

  function fromProto_RetrieveMessage(template(omit) PROTO_Interface.RetrieveMessage p_value)
    return template(omit) Interface.RetrieveMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }

  function toProto_RetrieveMessage(template(omit) Interface.RetrieveMessage p_value)
    return template(omit) PROTO_Interface.RetrieveMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }

  function fromProto_RetrieveMessageTop(template(omit) PROTO_Interface.RetrieveMessageTop p_value)
    return template(omit) Interface.RetrieveMessageTop {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId,
        numberOfLines := p_value.numberOfLines
      }
    }
  }

  function toProto_RetrieveMessageTop(template(omit) Interface.RetrieveMessageTop p_value)
    return template(omit) PROTO_Interface.RetrieveMessageTop {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId,
        numberOfLines := p_value.numberOfLines
      }
    }
  }

  function fromProto_DeleteMessage(template(omit) PROTO_Interface.DeleteMessage p_value)
    return template(omit) Interface.DeleteMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }

  function toProto_DeleteMessage(template(omit) Interface.DeleteMessage p_value)
    return template(omit) PROTO_Interface.DeleteMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }

  function fromProto_Status(template(omit) PROTO_Interface.Status p_value)
    return template(omit) Interface.Status {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        statusCode := p_value.statusCode,
        statusMessage := p_value.statusMessage,
        connected := p_value.connected,
        loggedIn := p_value.loggedIn
      }
    }
  }

  function toProto_Status(template(omit) Interface.Status p_value)
    return template(omit) PROTO_Interface.Status {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        statusCode := p_value.statusCode,
        statusMessage := p_value.statusMessage,
        connected := p_value.connected,
        loggedIn := p_value.loggedIn
      }
    }
  }

  function fromProto_POP3Message(template(omit) PROTO_Interface.POP3Message p_value)
    return template(omit) Interface.POP3Message {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId,
        partialContent := p_value.partialContent,
        rawContent := p_value.rawContent
      }
    }
  }

  function toProto_POP3Message(template(omit) Interface.POP3Message p_value)
    return template(omit) PROTO_Interface.POP3Message {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId,
        partialContent := p_value.partialContent,
        rawContent := p_value.rawContent
      }
    }
  }

  function fromProto_DeleteMessageResponse(template(omit) PROTO_Interface.DeleteMessageResponse p_value)
    return template(omit) Interface.DeleteMessageResponse {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }

  function toProto_DeleteMessageResponse(template(omit) Interface.DeleteMessageResponse p_value)
    return template(omit) PROTO_Interface.DeleteMessageResponse {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        messageId := p_value.messageId
      }
    }
  }
}
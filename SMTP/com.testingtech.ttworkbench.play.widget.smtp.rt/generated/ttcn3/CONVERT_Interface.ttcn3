// generated by ProtoGenerator at Tue Feb 12 13:52:04 CET 2013 - do not edit!
module CONVERT_Interface {
  import from Interface all;
  import from PROTO_Interface language "PROTO" all;

  function fromProto_Connect(template(omit) PROTO_Interface.Connect p_value)
    return template(omit) Interface.Connect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        server := p_value.server,
        portNumber := p_value.portNumber
      }
    }
  }

  function toProto_Connect(template(omit) Interface.Connect p_value)
    return template(omit) PROTO_Interface.Connect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        server := p_value.server,
        portNumber := p_value.portNumber
      }
    }
  }

  function fromProto_Disconnect(template(omit) PROTO_Interface.Disconnect p_value)
    return template(omit) Interface.Disconnect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
         
      }
    }
  }

  function toProto_Disconnect(template(omit) Interface.Disconnect p_value)
    return template(omit) PROTO_Interface.Disconnect {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        
      }
    }
  }

  function fromProto_Login(template(omit) PROTO_Interface.Login p_value)
    return template(omit) Interface.Login {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        method := p_value.method,
        username := p_value.username,
        password := p_value.password
      }
    }
  }

  function toProto_Login(template(omit) Interface.Login p_value)
    return template(omit) PROTO_Interface.Login {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        method := p_value.method,
        username := p_value.username,
        password := p_value.password
      }
    }
  }

  function fromProto_Logout(template(omit) PROTO_Interface.Logout p_value)
    return template(omit) Interface.Logout {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
         
      }
    }
  }

  function toProto_Logout(template(omit) Interface.Logout p_value)
    return template(omit) PROTO_Interface.Logout {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        
      }
    }
  }

  function fromProto_SendMessage(template(omit) PROTO_Interface.SendMessage p_value)
    return template(omit) Interface.SendMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        senderId := p_value.senderId,
        recipientIds := CONVERT_Interface.fromProto_SendMessage__recipientIds(p_value.recipientIds),
        recipientCCIds := CONVERT_Interface.fromProto_SendMessage__recipientCCIds(p_value.recipientCCIds),
        recipientBCCIds := CONVERT_Interface.fromProto_SendMessage__recipientBCCIds(p_value.recipientBCCIds),
        subject := p_value.subject,
        messageBody := p_value.messageBody
      }
    }
  }

  function toProto_SendMessage(template(omit) Interface.SendMessage p_value)
    return template(omit) PROTO_Interface.SendMessage {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        senderId := p_value.senderId,
        recipientIds := CONVERT_Interface.toProto_SendMessage__recipientIds(p_value.recipientIds),
        recipientCCIds := CONVERT_Interface.toProto_SendMessage__recipientCCIds(p_value.recipientCCIds),
        recipientBCCIds := CONVERT_Interface.toProto_SendMessage__recipientBCCIds(p_value.recipientBCCIds),
        subject := p_value.subject,
        messageBody := p_value.messageBody
      }
    }
  }

  function fromProto_SendMessage__recipientIds(template(omit) PROTO_Interface.SendMessage.recipientIds p_value)
    return template(omit) Interface.SendMessage.recipientIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessage.recipientIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessage__recipientIds(template(omit) Interface.SendMessage.recipientIds p_value)
    return template(omit) PROTO_Interface.SendMessage.recipientIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessage.recipientIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_SendMessage__recipientCCIds(template(omit) PROTO_Interface.SendMessage.recipientCCIds p_value)
    return template(omit) Interface.SendMessage.recipientCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessage.recipientCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessage__recipientCCIds(template(omit) Interface.SendMessage.recipientCCIds p_value)
    return template(omit) PROTO_Interface.SendMessage.recipientCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessage.recipientCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_SendMessage__recipientBCCIds(template(omit) PROTO_Interface.SendMessage.recipientBCCIds p_value)
    return template(omit) Interface.SendMessage.recipientBCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessage.recipientBCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessage__recipientBCCIds(template(omit) Interface.SendMessage.recipientBCCIds p_value)
    return template(omit) PROTO_Interface.SendMessage.recipientBCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessage.recipientBCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_HeaderField(template(omit) PROTO_Interface.HeaderField p_value)
    return template(omit) Interface.HeaderField {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        fieldName := p_value.fieldName,
        fieldValue := p_value.fieldValue
      }
    }
  }

  function toProto_HeaderField(template(omit) Interface.HeaderField p_value)
    return template(omit) PROTO_Interface.HeaderField {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        fieldName := p_value.fieldName,
        fieldValue := p_value.fieldValue
      }
    }
  }

  function fromProto_SendMessageWithCustomHeaders(template(omit) PROTO_Interface.SendMessageWithCustomHeaders p_value)
    return template(omit) Interface.SendMessageWithCustomHeaders {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        customHeaderFields := CONVERT_Interface.fromProto_SendMessageWithCustomHeaders__customHeaderFields(p_value.customHeaderFields),
        senderId := p_value.senderId,
        recipientIds := CONVERT_Interface.fromProto_SendMessageWithCustomHeaders__recipientIds(p_value.recipientIds),
        recipientCCIds := CONVERT_Interface.fromProto_SendMessageWithCustomHeaders__recipientCCIds(p_value.recipientCCIds),
        recipientBCCIds := CONVERT_Interface.fromProto_SendMessageWithCustomHeaders__recipientBCCIds(p_value.recipientBCCIds),
        subject := p_value.subject,
        messageBody := p_value.messageBody
      }
    }
  }

  function toProto_SendMessageWithCustomHeaders(template(omit) Interface.SendMessageWithCustomHeaders p_value)
    return template(omit) PROTO_Interface.SendMessageWithCustomHeaders {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        customHeaderFields := CONVERT_Interface.toProto_SendMessageWithCustomHeaders__customHeaderFields(p_value.customHeaderFields),
        senderId := p_value.senderId,
        recipientIds := CONVERT_Interface.toProto_SendMessageWithCustomHeaders__recipientIds(p_value.recipientIds),
        recipientCCIds := CONVERT_Interface.toProto_SendMessageWithCustomHeaders__recipientCCIds(p_value.recipientCCIds),
        recipientBCCIds := CONVERT_Interface.toProto_SendMessageWithCustomHeaders__recipientBCCIds(p_value.recipientBCCIds),
        subject := p_value.subject,
        messageBody := p_value.messageBody
      }
    }
  }

  function fromProto_SendMessageWithCustomHeaders__customHeaderFields(template(omit) PROTO_Interface.SendMessageWithCustomHeaders.customHeaderFields p_value)
    return template(omit) Interface.SendMessageWithCustomHeaders.customHeaderFields {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessageWithCustomHeaders.customHeaderFields v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := CONVERT_Interface.fromProto_HeaderField(p_value[i]);
      }
      return v_result;
    }
  }

  function toProto_SendMessageWithCustomHeaders__customHeaderFields(template(omit) Interface.SendMessageWithCustomHeaders.customHeaderFields p_value)
    return template(omit) PROTO_Interface.SendMessageWithCustomHeaders.customHeaderFields {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessageWithCustomHeaders.customHeaderFields v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := CONVERT_Interface.toProto_HeaderField(p_value[i]);
      }
      return v_result;
    }
  }

  function fromProto_SendMessageWithCustomHeaders__recipientIds(template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientIds p_value)
    return template(omit) Interface.SendMessageWithCustomHeaders.recipientIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessageWithCustomHeaders.recipientIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessageWithCustomHeaders__recipientIds(template(omit) Interface.SendMessageWithCustomHeaders.recipientIds p_value)
    return template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessageWithCustomHeaders.recipientIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_SendMessageWithCustomHeaders__recipientCCIds(template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientCCIds p_value)
    return template(omit) Interface.SendMessageWithCustomHeaders.recipientCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessageWithCustomHeaders.recipientCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessageWithCustomHeaders__recipientCCIds(template(omit) Interface.SendMessageWithCustomHeaders.recipientCCIds p_value)
    return template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessageWithCustomHeaders.recipientCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_SendMessageWithCustomHeaders__recipientBCCIds(template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientBCCIds p_value)
    return template(omit) Interface.SendMessageWithCustomHeaders.recipientBCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var Interface.SendMessageWithCustomHeaders.recipientBCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function toProto_SendMessageWithCustomHeaders__recipientBCCIds(template(omit) Interface.SendMessageWithCustomHeaders.recipientBCCIds p_value)
    return template(omit) PROTO_Interface.SendMessageWithCustomHeaders.recipientBCCIds {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      var PROTO_Interface.SendMessageWithCustomHeaders.recipientBCCIds v_result;
      for (var integer i := 0; i < lengthof(p_value); i := i + 1) {
        v_result[i] := p_value[i];
      }
      return v_result;
    }
  }

  function fromProto_Status(template(omit) PROTO_Interface.Status p_value)
    return template(omit) Interface.Status {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        statusCode := p_value.statusCode,
        statusMessage := p_value.statusMessage,
        connected := p_value.connected,
        loggedIn := p_value.loggedIn
      }
    }
  }

  function toProto_Status(template(omit) Interface.Status p_value)
    return template(omit) PROTO_Interface.Status {
    if (not ispresent(p_value)) {
      return omit;
    }
    else {
      return {
        statusCode := p_value.statusCode,
        statusMessage := p_value.statusMessage,
        connected := p_value.connected,
        loggedIn := p_value.loggedIn
      }
    }
  }
}